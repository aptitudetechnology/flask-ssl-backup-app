# utils/gpg_backup.py

import gnupg
import logging
from pathlib import Path
import os
from typing import Optional, Dict, List

class GPGBackup:
    # ---------------- NEW helpers ----------------
    def get_key_info_json(self, email: str) -> Dict:
        """Return key info in a JSONâ€‘friendly structure."""
        info = self.get_key_info(email)
        if not info:
            return {'success': False, 'message': f'No key found for {email}'}
        return {'success': True, 'data': info}

    def get_key_info_for_template(self, email: str) -> Optional[Dict]:
        """Return key info ready for direct use in Jinja templates."""
        return self.get_key_info(email)
    def __init__(self, config):
        self.config = config # Store the full config object

        # === FIX 1: Access AppPaths instance correctly ===
        self.app_paths = config.get('APP_PATHS')
        if not self.app_paths:
            raise ValueError("AppPaths instance not found in Flask app config. "
                             "Ensure app.config['APP_PATHS'] is set in your app factory.")

        # Assign paths using the AppPaths instance
        self.gpg_home_dir = self.app_paths.gpg_home_dir
        self.backup_dir = self.app_paths.backup_dir # Added for clarity in create_encrypted_backup

        # Ensure these config variables are set in your Flask app.config
        # e.g., app.config['GPG_BINARY_PATH'] = '/usr/bin/gpg'
        self.gnupg_bin_path = config.get('GPG_BINARY_PATH', 'gpg') # Provide a default if not set
        self.gpg_keyserver = config.get('GPG_KEYSERVER', 'hkps://keys.openpgp.org') # Provide a default

        # Initialize GPG and logging using the corrected paths
        self.gpg = self._initialize_gpg()
        self.logger = self._setup_logging()

    def _initialize_gpg(self):
        # Ensure the GPG home directory exists (AppPaths should do this, but safe to re-confirm)
        self.gpg_home_dir.mkdir(parents=True, exist_ok=True)
        # gnupg.GPG expects str for gnupghome
        return gnupg.GPG(gnupghome=str(self.gpg_home_dir), gpgbinary=self.gnupg_bin_path)

    def _setup_logging(self):
        # Setup specific logger for GPG operations
        logger = logging.getLogger('gpg_backup_logger')
        logger.setLevel(self.config.get('LOG_LEVEL', logging.INFO)) # Use .get() for config values
        if not logger.handlers: # Prevent adding multiple handlers if called multiple times
            # === FIX 2: Access gpg_log_file correctly ===
            handler = logging.FileHandler(self.app_paths.gpg_log_file)
            formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            logger.addHandler(logging.StreamHandler()) # Also log to console
        return logger

    def has_public_key(self, email: str) -> bool:
        """
        Check if a public key exists for the given email address in the local keyring.
        
        Args:
            email: Email address to search for
            
        Returns:
            bool: True if a public key exists for this email, False otherwise
        """
        try:
            self.logger.debug(f"Checking for public key for email: {email}")
            
            # Get all public keys from the local keyring
            keys = self.gpg.list_keys()
            
            # Check if any key has this email in its UIDs
            for key in keys:
                for uid in key.get('uids', []):
                    if email.lower() in uid.lower():
                        self.logger.debug(f"Found public key for {email}: {key.get('keyid', 'Unknown')}")
                        return True
            
            self.logger.debug(f"No public key found for {email}")
            return False
            
        except Exception as e:
            self.logger.error(f"Error checking for public key for {email}: {e}")
            return False

    def get_key_info(self, email: str) -> Optional[Dict]:
        """
        Get detailed information about the public key for the given email.
        
        Args:
            email: Email address to search for
            
        Returns:
            dict: Key information including keyid, fingerprint, uids, etc. or None if not found
        """
        try:
            self.logger.debug(f"Getting key info for email: {email}")
            
            keys = self.gpg.list_keys()
            for key in keys:
                for uid in key.get('uids', []):
                    if email.lower() in uid.lower():
                        key_info = {
                            'keyid': key.get('keyid', 'Unknown'),
                            'fingerprint': key.get('fingerprint', 'Unknown'),
                            'uids': key.get('uids', []),
                            'expires': key.get('expires', 'Never'),
                            'length': key.get('length', 'Unknown'),
                            'algo': key.get('algo', 'Unknown'),
                            'trust': key.get('trust', 'Unknown'),
                            'date': key.get('date', 'Unknown')
                        }
                        self.logger.debug(f"Found key info for {email}: {key_info['keyid']}")
                        return key_info
            
            self.logger.debug(f"No key info found for {email}")
            return None
            
        except Exception as e:
            self.logger.error(f"Error getting key info for {email}: {e}")
            return None

    def validate_key_for_encryption(self, email: str) -> tuple[bool, str]:
        """
        Validate that a key is suitable for encryption.
        
        Args:
            email: Email address to validate
            
        Returns:
            tuple: (is_valid, error_message)
        """
        try:
            key_info = self.get_key_info(email)
            if not key_info:
                return False, f"No public key found for {email}"
            
            # Check if key is expired
            expires = key_info.get('expires')
            if expires and expires != 'Never':
                try:
                    from datetime import datetime
                    expire_date = datetime.fromtimestamp(int(expires))
                    if expire_date < datetime.now():
                        return False, f"Key for {email} has expired on {expire_date.strftime('%Y-%m-%d')}"
                except (ValueError, TypeError):
                    # If we can't parse the expiration date, assume it's okay
                    pass
            
            # Check key trust level (optional - you might want to be less strict)
            trust = key_info.get('trust', '').lower()
            if trust in ['revoked', 'expired', 'disabled']:
                return False, f"Key for {email} is {trust}"
            
            self.logger.debug(f"Key validation passed for {email}")
            return True, "Key is valid for encryption"
            
        except Exception as e:
            error_msg = f"Error validating key for {email}: {e}"
            self.logger.error(error_msg)
            return False, error_msg

    def list_local_keys(self) -> List[Dict]:
        """
        List all public keys in the local keyring.
        
        Returns:
            list: List of key information dictionaries
        """
        try:
            keys = self.gpg.list_keys()
            key_list = []
            
            for key in keys:
                key_info = {
                    'keyid': key.get('keyid', 'Unknown'),
                    'fingerprint': key.get('fingerprint', 'Unknown'),
                    'uids': key.get('uids', []),
                    'expires': key.get('expires', 'Never'),
                    'length': key.get('length', 'Unknown'),
                    'algo': key.get('algo', 'Unknown'),
                    'trust': key.get('trust', 'Unknown'),
                    'date': key.get('date', 'Unknown')
                }
                key_list.append(key_info)
            
            self.logger.debug(f"Found {len(key_list)} keys in local keyring")
            return key_list
            
        except Exception as e:
            self.logger.error(f"Error listing local keys: {e}")
            return []

    def search_keys(self, email: str) -> list:
        """
        Searches for public keys on a keyserver and returns key information.
        Returns a list of key dictionaries with 'key_id', 'uids', 'created' etc.
        """
        try:
            self.logger.info(f"Searching for GPG keys for email: {email} on keyserver: {self.gpg_keyserver}")
            search_result = self.gpg.search_keys(email, keyserver=self.gpg_keyserver)

            if search_result:
                keys = []
                for key in search_result:
                    key_info = {
                        'key_id': key.get('keyid', 'Unknown'),
                        'uids': key.get('uids', []),
                        'created': key.get('date', 'Unknown'),
                        'length': key.get('length', 'Unknown'),
                        'algo': key.get('algo', 'Unknown')
                    }
                    if 'fingerprint' in key:
                        key_info['fingerprint'] = key['fingerprint']
                    keys.append(key_info)

                self.logger.info(f"Found {len(keys)} key(s) for {email}")
                return keys
            else:
                self.logger.warning(f"No keys found for {email} on keyserver {self.gpg_keyserver}")
                return []
        except Exception as e:
            self.logger.error(f"Error searching GPG keys: {e}")
            return []

    def create_encrypted_backup(self, input_filepath: Path, recipient_email: str) -> Optional[Path]:
        """
        Encrypts the given file using the recipient's public GPG key.
        Returns the path to the encrypted file or None on failure.
        """
        if not input_filepath.exists():
            self.logger.error(f"Input file for GPG encryption not found: {input_filepath}")
            return None

        if not recipient_email:
            self.logger.error("GPG recipient email not provided for encryption.")
            return None

        # Validate that we have a suitable key before attempting encryption
        key_valid, error_msg = self.validate_key_for_encryption(recipient_email)
        if not key_valid:
            self.logger.error(f"Key validation failed for {recipient_email}: {error_msg}")
            return None

        # === FIX 3: Access backup_dir and get_gpg_backup_filename correctly ===
        output_filepath = self.backup_dir / self.app_paths.get_gpg_backup_filename(input_filepath.name)

        self.logger.info(f"Encrypting {input_filepath} for {recipient_email} to {output_filepath}")

        # Search for the key if not already present locally
        if not self.has_public_key(recipient_email):
            self.logger.info(f"Recipient key for {recipient_email} not found locally. Attempting to search and import from keyserver.")
            search_result = self.gpg.search_keys(recipient_email, keyserver=self.gpg_keyserver)

            self.logger.debug(f"DEBUG: GPG search_keys result: {search_result}")

            if search_result:
                # Try to get fingerprints first, but fall back to keyids if fingerprints aren't available
                identifiers = []
                for key in search_result:
                    if 'fingerprint' in key and key['fingerprint']:
                        identifiers.append(key['fingerprint'])
                        self.logger.info(f"Found key with fingerprint: {key['fingerprint']}")
                    elif 'keyid' in key and key['keyid']:
                        identifiers.append(key['keyid'])
                        self.logger.info(f"Found key with keyid (no fingerprint): {key['keyid']}")
                    else:
                        self.logger.warning(f"Skipping key with no usable identifier: {key}")

                if not identifiers:
                    self.logger.warning(f"No valid GPG identifiers found for {recipient_email} despite search results.")
                    return None

                self.logger.info(f"Found keys: {identifiers}. Importing first key.")
                import_result = self.gpg.recv_keys(self.gpg_keyserver, identifiers[0])

                self.logger.debug(f"DEBUG: GPG recv_keys result: {import_result.results}")
                self.logger.debug(f"DEBUG: GPG recv_keys count: {import_result.count}")
                self.logger.debug(f"DEBUG: GPG recv_keys stderr: {getattr(import_result, 'stderr', 'No stderr available')}")

                if import_result.results:
                    imported_key = import_result.results[0]
                    key_info = imported_key.get('fingerprint', imported_key.get('keyid', 'Unknown'))
                    self.logger.info(f"Key imported: {key_info}")
                else:
                    self.logger.warning(f"Failed to import key for {recipient_email}: {getattr(import_result, 'stderr', 'No error details')}")
                    return None
            else:
                self.logger.warning(f"No public GPG key found for {recipient_email} on keyserver: {self.gpg_keyserver}")
                return None

        try:
            with open(input_filepath, 'rb') as f:
                # Use recipient_email directly with gnupg.GPG as it can resolve to key by email
                status = self.gpg.encrypt_file(f, recipients=[recipient_email], output=str(output_filepath), always_trust=True)

            if status.ok:
                self.logger.info(f"GPG encryption successful: {output_filepath}")
                return output_filepath
            else:
                self.logger.error(f"GPG encryption failed for {input_filepath.name}: {status.stderr}")
                return None
        except Exception as e:
            self.logger.error(f"An unexpected error occurred during GPG encryption: {e}")
            return None

    def import_key_from_file(self, key_filepath: Path) -> bool:
        """
        Imports a public GPG key from a file.
        """
        if not key_filepath.exists():
            self.logger.error(f"Key file not found: {key_filepath}")
            return False
        try:
            with open(key_filepath, 'rb') as f:
                import_result = self.gpg.import_keys(f.read())
            if import_result.count > 0:
                self.logger.info(f"Successfully imported {import_result.count} key(s) from {key_filepath}")
                return True
            else:
                self.logger.warning(f"No keys imported from {key_filepath}: {getattr(import_result, 'stderr', 'No error details')}")
                return False
        except Exception as e:
            self.logger.error(f"Error importing key from file {key_filepath}: {e}")
            return False

    def import_key(self, key_id: str) -> dict:
        """
        Imports a GPG key by key ID from a keyserver.
        Returns a dictionary with success status and message.
        """
        try:
            self.logger.info(f"Importing GPG key: {key_id} from keyserver: {self.gpg_keyserver}")
            import_result = self.gpg.recv_keys(self.gpg_keyserver, key_id)

            if import_result.results:
                imported_key = import_result.results[0]
                key_info = imported_key.get('fingerprint', imported_key.get('keyid', 'Unknown'))
                message = f"Successfully imported key: {key_info}"
                self.logger.info(message)
                return {'success': True, 'message': message}
            else:
                error_msg = getattr(import_result, 'stderr', 'Unknown error during import')
                self.logger.warning(f"Failed to import key {key_id}: {error_msg}")
                return {'success': False, 'error': f"Failed to import key: {error_msg}"}
        except Exception as e:
            error_msg = f"Error importing GPG key {key_id}: {e}"
            self.logger.error(error_msg)
            return {'success': False, 'error': error_msg}

    def search_and_import_key(self, email: str) -> bool:
        """
        Searches for a public key on a keyserver and imports it.
        """
        try:
            self.logger.info(f"Searching for GPG keys for email: {email} on keyserver: {self.gpg_keyserver}")
            search_result = self.gpg.search_keys(email, keyserver=self.gpg_keyserver)

            if search_result:
                # Use the same logic as in create_encrypted_backup
                identifiers = []
                for key in search_result:
                    if 'fingerprint' in key and key['fingerprint']:
                        identifiers.append(key['fingerprint'])
                    elif 'keyid' in key and key['keyid']:
                        identifiers.append(key['keyid'])

                if identifiers:
                    self.logger.info(f"Found {len(identifiers)} key(s) for {email}. Importing...")
                    import_result = self.gpg.recv_keys(self.gpg_keyserver, *identifiers)

                    if import_result.results:
                        self.logger.info(f"Successfully imported {import_result.count} key(s).")
                        return True
                    else:
                        self.logger.warning(f"Failed to import keys: {getattr(import_result, 'stderr', 'No error details')}")
                        return False
                else:
                    self.logger.warning(f"No valid identifiers found for keys: {search_result}")
                    return False
            else:
                self.logger.warning(f"No keys found for {email} on keyserver {self.gpg_keyserver}")
                return False
        except Exception as e:
            self.logger.error(f"Error searching/importing GPG key: {e}")
            return False